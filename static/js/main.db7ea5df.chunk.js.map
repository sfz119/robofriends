{"version":3,"sources":["constance.js","reducers.js","Components/card.js","Components/CardList.js","Components/searchBox.js","Components/scroll.js","Containers/App.js","actions.js","registerServiceWorker.js","index.js"],"names":["CHANGE_SEARCH_FIELD","REQUEST_ROBOTS_PENDING","REQUEST_ROBOTS_SUCCESS","REQUEST_ROBOTS_FAILED","initialStateSearch","searchField","initialStateRobots","isPending","robots","error","Card","id","name","username","email","className","src","alt","CardList","map","user","i","SearchBox","searchChange","type","placeholder","onChange","Scroll","props","style","overflowY","height","children","App","this","onRequestRobots","onSearchChange","users","filterRobots","filter","toLowerCase","includes","Component","connect","state","searchRobots","requestRobots","dispatch","event","text","target","value","payload","fetch","then","res","json","data","catch","err","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","logger","createLogger","rootReducer","combineReducers","action","Object","assign","Store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","store","document","getElementById","URL","process","origin","addEventListener","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.db7ea5df.chunk.js","sourcesContent":["export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\r\n\r\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\r\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\r\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED';","import { \r\n    CHANGE_SEARCH_FIELD,\r\n    REQUEST_ROBOTS_PENDING,\r\n    REQUEST_ROBOTS_SUCCESS,\r\n    REQUEST_ROBOTS_FAILED\r\n} from \"./constance\"\r\n\r\nconst initialStateSearch = {\r\n    searchField: '',\r\n}\r\n\r\nexport const searchRobots = (state = initialStateSearch, action = {}) => {\r\n    switch(action.type){\r\n        case CHANGE_SEARCH_FIELD:\r\n            return Object.assign({}, state, { searchField: action.payload });\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nconst initialStateRobots = {\r\n    isPending: false,\r\n    robots: [],\r\n    error: ''\r\n}\r\n\r\nexport const requestRobots = (state = initialStateRobots, action={})=>{\r\n    switch(action.type) {\r\n        case REQUEST_ROBOTS_PENDING:\r\n            return Object.assign({}, state, { isPending: true});\r\n        case REQUEST_ROBOTS_SUCCESS:\r\n            return Object.assign({}, state, { robots: action.payload, isPending: false});\r\n        case REQUEST_ROBOTS_FAILED:\r\n            return Object.assign({}, state, { error: action.payload, isPending: false });\r\n        default:\r\n            return state;\r\n    }\r\n}","import React from 'react';\r\n\r\nfunction Card({id, name, username, email}) {\r\n    return (\r\n        <div className=\"bg-black dib br3 ma3 pa3 grow tc\">\r\n            <img src={`https://robohash.org/${id}?200*200`} aria-hidden alt={`image of ${username}`} />\r\n            <div>\r\n                <h2>{name}</h2>\r\n                <p>{email}</p>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Card;\r\n","import React from 'react';\r\nimport Card from './card';\r\n\r\nfunction CardList({robots}) {\r\n    return (\r\n        <div>\r\n        {\r\n            robots.map((user, i) =>{\r\n                return (\r\n                    <Card \r\n                        key={i} \r\n                        id={user.id} \r\n                        name={user.name} \r\n                        username={user.username} \r\n                        email={user.email}\r\n                    />\r\n                )\r\n            })\r\n        }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CardList\r\n","import React from 'react';\r\n\r\nfunction SearchBox({searchChange}) {\r\n    return (\r\n        <div>\r\n            <input \r\n                className=\"pa3 br3 ba b--black bg-dark-gray white mb4 tc\"\r\n                type=\"search\" \r\n                placeholder=\"Search Robots Here...\" \r\n                onChange={searchChange}\r\n            />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SearchBox;\r\n","import React from 'react';\r\n\r\nfunction Scroll(props) {\r\n    return (\r\n        <div style={{overflowY:'scroll', height: '70vh'}}>\r\n            {props.children}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Scroll\r\n","import React, {Component} from 'react';\nimport { connect } from 'react-redux';\nimport CardList from '../Components/CardList';\nimport SearchBox from '../Components/searchBox';\nimport Scroll from '../Components/scroll';\n\nimport { setSearchField, requestRobots } from '../actions';\n\nconst mapStateToProps = state => {\n  return {\n    searchField: state.searchRobots.searchField,\n    users: state.requestRobots.robots,\n    isPending: state.requestRobots.isPending,\n    error: state.requestRobots.error\n  }\n}\nconst mapDispatchToProps = (dispatch) => {\n  return { \n    onSearchChange: (event) => dispatch(setSearchField(event.target.value)),\n    onRequestRobots: () => dispatch(requestRobots())\n  }\n}\n\nclass App extends Component{\n  \n  componentDidMount(){\n    this.props.onRequestRobots();\n  }\n\n\n  render(){\n    const { searchField, onSearchChange, users, isPending } = this.props;\n    \n    const filterRobots = users.filter(user => {\n      return user.name.toLowerCase().includes(searchField.toLowerCase());\n    })\n\n    return isPending ?\n      <div className=\"tc\">\n        <h2 id=\"header\" className=\"f1 tc\">Loading...</h2>\n      </div> :\n      <div className=\"tc\">\n        <h2 id=\"header\" className=\"f1 tc\">Robo Friends</h2>\n        <SearchBox searchChange={onSearchChange} />\n        <Scroll>\n          <CardList robots={filterRobots} />\n        </Scroll>\n      </div>\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","import { \r\n    CHANGE_SEARCH_FIELD,\r\n    REQUEST_ROBOTS_PENDING,\r\n    REQUEST_ROBOTS_SUCCESS,\r\n    REQUEST_ROBOTS_FAILED\r\n} from \"./constance\"\r\n\r\nexport const setSearchField = (text) => {\r\n    return({\r\n        type: CHANGE_SEARCH_FIELD,\r\n        payload: text\r\n    })\r\n}\r\n\r\nexport const requestRobots = () => (dispatch) =>{\r\n    dispatch({type: REQUEST_ROBOTS_PENDING});\r\n    fetch('https://jsonplaceholder.typicode.com/users')\r\n    .then(res => res.json())\r\n    .then(data => dispatch({ type: REQUEST_ROBOTS_SUCCESS, payload: data}))\r\n    .catch(err => dispatch({ type: REQUEST_ROBOTS_FAILED, payload: err}))\r\n}","const isLocalhost = Boolean(\r\n    window.location.hostname === 'localhost' ||\r\n      // [::1] is the IPv6 localhost address.\r\n      window.location.hostname === '[::1]' ||\r\n      // 127.0.0.1/8 is considered localhost for IPv4.\r\n      window.location.hostname.match(\r\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n      )\r\n  );\r\n  \r\n  export default function register() {\r\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n      // The URL constructor is available in all browsers that support SW.\r\n      const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\r\n      if (publicUrl.origin !== window.location.origin) {\r\n        // Our service worker won't work if PUBLIC_URL is on a different origin\r\n        // from what our page is served on. This might happen if a CDN is used to\r\n        // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\r\n        return;\r\n      }\r\n  \r\n      window.addEventListener('load', () => {\r\n        const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n  \r\n        if (isLocalhost) {\r\n          // This is running on localhost. Lets check if a service worker still exists or not.\r\n          checkValidServiceWorker(swUrl);\r\n        } else {\r\n          // Is not local host. Just register service worker\r\n          registerValidSW(swUrl);\r\n        }\r\n      });\r\n    }\r\n  }\r\n  \r\n  function registerValidSW(swUrl) {\r\n    navigator.serviceWorker\r\n      .register(swUrl)\r\n      .then(registration => {\r\n        registration.onupdatefound = () => {\r\n          const installingWorker = registration.installing;\r\n          installingWorker.onstatechange = () => {\r\n            if (installingWorker.state === 'installed') {\r\n              if (navigator.serviceWorker.controller) {\r\n                // At this point, the old content will have been purged and\r\n                // the fresh content will have been added to the cache.\r\n                // It's the perfect time to display a \"New content is\r\n                // available; please refresh.\" message in your web app.\r\n                console.log('New content is available; please refresh.');\r\n              } else {\r\n                // At this point, everything has been precached.\r\n                // It's the perfect time to display a\r\n                // \"Content is cached for offline use.\" message.\r\n                console.log('Content is cached for offline use.');\r\n              }\r\n            }\r\n          };\r\n        };\r\n      })\r\n      .catch(error => {\r\n        console.error('Error during service worker registration:', error);\r\n      });\r\n  }\r\n  \r\n  function checkValidServiceWorker(swUrl) {\r\n    // Check if the service worker can be found. If it can't reload the page.\r\n    fetch(swUrl)\r\n      .then(response => {\r\n        // Ensure service worker exists, and that we really are getting a JS file.\r\n        if (\r\n          response.status === 404 ||\r\n          response.headers.get('content-type').indexOf('javascript') === -1\r\n        ) {\r\n          // No service worker found. Probably a different app. Reload the page.\r\n          navigator.serviceWorker.ready.then(registration => {\r\n            registration.unregister().then(() => {\r\n              window.location.reload();\r\n            });\r\n          });\r\n        } else {\r\n          // Service worker found. Proceed as normal.\r\n          registerValidSW(swUrl);\r\n        }\r\n      })\r\n      .catch(() => {\r\n        console.log(\r\n          'No internet connection found. App is running in offline mode.'\r\n        );\r\n      });\r\n  }\r\n  \r\n  export function unregister() {\r\n    if ('serviceWorker' in navigator) {\r\n      navigator.serviceWorker.ready.then(registration => {\r\n        registration.unregister();\r\n      });\r\n    }\r\n  }","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { searchRobots, requestRobots } from './reducers';\nimport { createLogger } from 'redux-logger';\nimport thunkMiddleware from 'redux-thunk';\nimport App from './Containers/App';\nimport './index.css';\nimport 'tachyons';\nimport registerServiceWorker  from './registerServiceWorker';\n\nconst logger = createLogger();\nconst rootReducer = combineReducers({ searchRobots, requestRobots});\nconst Store = createStore(rootReducer, applyMiddleware(thunkMiddleware, logger));\n\nReactDOM.render(\n  <Provider store={Store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n\nregisterServiceWorker();\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n\n"],"sourceRoot":""}