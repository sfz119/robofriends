{"version":3,"sources":["constance.js","reducers.js","Components/card.js","Components/CardList.js","Components/searchBox.js","Components/scroll.js","Containers/App.js","actions.js","index.js"],"names":["CHANGE_SEARCH_FIELD","REQUEST_ROBOTS_PENDING","REQUEST_ROBOTS_SUCCESS","REQUEST_ROBOTS_FAILED","initialStateSearch","searchField","initialStateRobots","isPending","robots","error","Card","id","name","username","email","className","src","alt","CardList","map","user","i","SearchBox","searchChange","type","placeholder","onChange","Scroll","props","style","overflowY","height","children","App","this","onRequestRobots","onSearchChange","users","filterRobots","filter","toLowerCase","includes","Component","connect","state","searchRobots","requestRobots","dispatch","event","text","target","value","payload","fetch","then","res","json","data","catch","err","logger","createLogger","rootReducer","combineReducers","action","Object","assign","Store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","store","document","getElementById"],"mappings":"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","file":"static/js/main.2c76e4c7.chunk.js","sourcesContent":["export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\r\n\r\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\r\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\r\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED';","import { \r\n    CHANGE_SEARCH_FIELD,\r\n    REQUEST_ROBOTS_PENDING,\r\n    REQUEST_ROBOTS_SUCCESS,\r\n    REQUEST_ROBOTS_FAILED\r\n} from \"./constance\"\r\n\r\nconst initialStateSearch = {\r\n    searchField: '',\r\n}\r\n\r\nexport const searchRobots = (state = initialStateSearch, action = {}) => {\r\n    switch(action.type){\r\n        case CHANGE_SEARCH_FIELD:\r\n            return Object.assign({}, state, { searchField: action.payload });\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nconst initialStateRobots = {\r\n    isPending: false,\r\n    robots: [],\r\n    error: ''\r\n}\r\n\r\nexport const requestRobots = (state = initialStateRobots, action={})=>{\r\n    switch(action.type) {\r\n        case REQUEST_ROBOTS_PENDING:\r\n            return Object.assign({}, state, { isPending: true});\r\n        case REQUEST_ROBOTS_SUCCESS:\r\n            return Object.assign({}, state, { robots: action.payload, isPending: false});\r\n        case REQUEST_ROBOTS_FAILED:\r\n            return Object.assign({}, state, { error: action.payload, isPending: false });\r\n        default:\r\n            return state;\r\n    }\r\n}","import React from 'react';\r\n\r\nfunction Card({id, name, username, email}) {\r\n    return (\r\n        <div className=\"bg-black dib br3 ma3 pa3 grow tc\">\r\n            <img src={`https://robohash.org/${id}?size=200x200`} aria-hidden alt={`image of ${username}`} />\r\n            <div>\r\n                <h2>{name}</h2>\r\n                <p>{email}</p>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Card;\r\n","import React from 'react';\r\nimport Card from './card';\r\n\r\nfunction CardList({robots}) {\r\n    return (\r\n        <div>\r\n        {\r\n            robots.map((user, i) =>{\r\n                return (\r\n                    <Card \r\n                        key={i} \r\n                        id={user.id} \r\n                        name={user.name} \r\n                        username={user.username} \r\n                        email={user.email}\r\n                    />\r\n                )\r\n            })\r\n        }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CardList\r\n","import React from 'react';\r\n\r\nfunction SearchBox({searchChange}) {\r\n    return (\r\n        <div>\r\n            <input \r\n                className=\"pa3 br3 ba b--black bg-dark-gray white mb4 tc\"\r\n                aria-label=\"Search Robots\"\r\n                type=\"search\" \r\n                placeholder=\"Search Robots Here...\" \r\n                onChange={searchChange}\r\n            />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SearchBox;\r\n","import React from 'react';\r\n\r\nfunction Scroll(props) {\r\n    return (\r\n        <div style={{overflowY:'scroll', height: '70vh'}}>\r\n            {props.children}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Scroll\r\n","import React, {Component} from 'react';\nimport { connect } from 'react-redux';\nimport CardList from '../Components/CardList';\nimport SearchBox from '../Components/searchBox';\nimport Scroll from '../Components/scroll';\n\nimport { setSearchField, requestRobots } from '../actions';\n\nconst mapStateToProps = state => {\n  return {\n    searchField: state.searchRobots.searchField,\n    users: state.requestRobots.robots,\n    isPending: state.requestRobots.isPending,\n    error: state.requestRobots.error\n  }\n}\nconst mapDispatchToProps = (dispatch) => {\n  return { \n    onSearchChange: (event) => dispatch(setSearchField(event.target.value)),\n    onRequestRobots: () => dispatch(requestRobots())\n  }\n}\n\nclass App extends Component{\n  \n  componentDidMount(){\n    this.props.onRequestRobots();\n  }\n\n\n  render(){\n    const { searchField, onSearchChange, users, isPending } = this.props;\n    \n    const filterRobots = users.filter(user => {\n      return user.name.toLowerCase().includes(searchField.toLowerCase());\n    })\n\n    return isPending ?\n      <div className=\"tc\">\n        <h2 id=\"header\" className=\"f1 tc\">Loading...</h2>\n      </div> :\n      <div className=\"tc\">\n        <h2 id=\"header\" className=\"f1 tc\">Robo Friends</h2>\n        <SearchBox searchChange={onSearchChange} />\n        <Scroll>\n          <CardList robots={filterRobots} />\n        </Scroll>\n      </div>\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","import { \r\n    CHANGE_SEARCH_FIELD,\r\n    REQUEST_ROBOTS_PENDING,\r\n    REQUEST_ROBOTS_SUCCESS,\r\n    REQUEST_ROBOTS_FAILED\r\n} from \"./constance\"\r\n\r\nexport const setSearchField = (text) => {\r\n    return({\r\n        type: CHANGE_SEARCH_FIELD,\r\n        payload: text\r\n    })\r\n}\r\n\r\nexport const requestRobots = () => (dispatch) =>{\r\n    dispatch({type: REQUEST_ROBOTS_PENDING});\r\n    fetch('https://jsonplaceholder.typicode.com/users')\r\n    .then(res => res.json())\r\n    .then(data => dispatch({ type: REQUEST_ROBOTS_SUCCESS, payload: data}))\r\n    .catch(err => dispatch({ type: REQUEST_ROBOTS_FAILED, payload: err}))\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { searchRobots, requestRobots } from './reducers';\nimport { createLogger } from 'redux-logger';\nimport thunkMiddleware from 'redux-thunk';\nimport App from './Containers/App';\nimport './index.css';\nimport 'tachyons';\n\nconst logger = createLogger();\nconst rootReducer = combineReducers({ searchRobots, requestRobots});\nconst Store = createStore(rootReducer, applyMiddleware(thunkMiddleware, logger));\n\nReactDOM.render(\n  <Provider store={Store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n\n"],"sourceRoot":""}